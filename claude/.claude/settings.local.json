{
  "permissions": {
    "allow": [
      "Bash(./agent-send.sh:*)",
      "Bash(mkdir:*)",
      "Bash(touch:*)",
      "Bash(echo:*)",
      "Bash(if:*)",
      "Bash([ -f ./tmp/worker*_done.txt ]*)",
      "Bash(*worker*_done.txt*)",
      "Bash(mkdir:*)",
      "Bash(then)",
      "Bash(else)",
      "Bash(nvim:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(voicevox:*)",
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(nvim:*)",
      "Bash(find:*)",
      "Bash(nvim:*)",
      "Bash(cat:*)",
      "Bash(nvim:*)",
      "Bash(rg:*)",
      "Bash(chmod:*)",
      "Bash(~/nvim_comprehensive_test.sh)",
      "Bash(ls:*)",
      "Bash(ls:*)",
      "Bash(time nvim:*)",
      "Bash(rg:*)",
      "Bash(voicevox:*)",
      "Bash(timeout:*)",
      "Bash(grep:*)",
      "Bash(grep:*)",
      "Bash(rm:*)",
      "Bash(tmux source-file:*)",
      "Bash(yarn:*)",
      "Bash(yarn --cwd ../frontend run type-check)",
      "Bash(yarn --cwd ../frontend run build)",
      "Bash(yarn:*)",
      "Bash(../node_modules/.bin/tsc:*)",
      "Bash(npm --prefix /Users/kaikojima/Desktop/develop/smart-approach/frontend run typecheck)",
      "Bash(../node_modules/.bin/eslint ../src)",
      "Bash(../node_modules/.bin/vite build:*)",
      "Bash(npx tsc:*)",
      "Bash(./quality-check.sh:*)",
      "Bash(fi)",
      "Bash(bash:*)",
      "WebFetch(domain:localhost)",
      "Bash(# worker1の完了ファイルを一旦削除\nrm -f ./tmp/worker1_done.txt\n\n# 進捗確認タイマーの設定\n(sleep 120 && {\n    if [ ! -f ./tmp/worker1_done.txt ]; then\n        echo \"進捗確認を開始します...\"\n        ./agent-send.sh worker1 \"ShowProductPageの実装進捗はいかがですか？困っていることがあれば共有してください。\"\n    fi\n}) &)",
      "Bash(# worker1の完了ファイルをリセット\nrm -f ./tmp/worker1_done.txt\n\n# 進捗確認タイマーの設定\n(sleep 120 && {\n    if [ ! -f ./tmp/worker1_done.txt ]; then\n        echo \"進捗確認を開始します...\"\n        ./agent-send.sh worker1 \"ProductDetailコンポーネントの実装進捗はいかがですか？困っていることがあれば共有してください。\"\n    fi\n}) &)",
      "Bash(/Users/kaikojima/Desktop/develop/smart-approach/frontend/claude/agent-send.sh:*)",
      "Bash([ ! -f ./tmp/worker1_done.txt ])",
      "Bash([ ! -f ./tmp/worker2_done.txt ])",
      "Bash(__NEW_LINE__ [ ! -f ./tmp/worker1_done.txt ])",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__onboarding",
      "mcp__serena__list_dir",
      "mcp__serena__write_memory",
      "mcp__serena__read_memory",
      "mcp__serena__find_symbol",
      "mcp__serena__list_memories",
      "mcp__serena__read_memory",
      "mcp__serena__read_memory",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__replace_regex",
      "Bash(# 完了ファイルをリセット\nrm -f ./tmp/worker1_done.txt\n\n# 進捗確認タイマーの設定（2分後）\n(sleep 120 && {\n    if [ ! -f ./tmp/worker1_done.txt ]; then\n        echo \"\"進捗確認を開始します...\"\"\n        ./agent-send.sh worker1 \"\"進捗はいかがですか？Disclosureコンポーネントの間隔調整で困っていることがあれば共有してください。\"\"\n    fi\n}) &\n\necho \"\"進捗管理システムを開始しました。worker1の作業完了を監視中...\"\")",
      "Bash(# 完了ファイルをリセット\nrm -f ./tmp/worker1_done.txt\n\n# 進捗確認タイマーの設定（2分後）\n(sleep 120 && {\n    if [ ! -f ./tmp/worker1_done.txt ]; then\n        echo \"\"進捗確認を開始します...\"\"\n        ./agent-send.sh worker1 \"\"進捗はいかがですか？ステップタイトルのfont-medium→font-boldの変更で困っていることがあれば共有してください。\"\"\n    fi\n}) &\n\necho \"\"進捗管理システムを開始しました。worker1の作業完了を監視中...\"\")",
      "Bash(# 完了ファイルをリセット\nrm -f ./tmp/worker1_done.txt\n\n# 進捗確認タイマーの設定（3分後に最初の確認）\n(sleep 180 && {\n    if [ ! -f ./tmp/worker1_done.txt ]; then\n        echo \"\"進捗確認を開始します...\"\"\n        ./agent-send.sh worker1 \"\"進捗はいかがですか？大幅なレイアウト変更作業で困っていることがあれば共有してください。段階的に実装を進めてください。\"\"\n    fi\n}) &\n\necho \"\"進捗管理システムを開始しました。3分後に進捗確認を行います。複雑なタスクのため、定期的に進捗報告をお願いします。\"\")",
      "Bash(# 完了ファイルをリセット\nrm -f ./tmp/worker1_done.txt ./tmp/worker2_done.txt\n\n# 進捗確認タイマーの設定（2分後）\n(sleep 120 && {\n    echo \"\"進捗確認を開始します...\"\"\n    \n    # worker1の確認\n    if [ ! -f ./tmp/worker1_done.txt ]; then\n        echo \"\"worker1に進捗確認を送信...\"\"\n        ./agent-send.sh worker1 \"\"進捗はいかがですか？analysisページの幅制限範囲修正で困っていることがあれば共有してください。\"\"\n    fi\n    \n    # worker2の確認\n    if [ ! -f ./tmp/worker2_done.txt ]; then\n        echo \"\"worker2に進捗確認を送信...\"\"\n        ./agent-send.sh worker2 \"\"進捗はいかがですか？companyページのパンくず追加で困っていることがあれば共有してください。\"\"\n    fi\n}) &\n\necho \"\"進捗管理システムを開始しました。2分後に自動的に進捗確認を行います。\"\")",
      "mcp__serena__find_file",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__search_for_pattern",
      "Bash(# 完了ファイルをリセット\nrm -f ./tmp/worker1_done.txt ./tmp/worker2_done.txt\n\n# 進捗確認タイマーの設定（2分後）\n(sleep 120 && {\n    echo \"\"進捗確認を開始します...\"\"\n    \n    # worker1の確認\n    if [ ! -f ./tmp/worker1_done.txt ]; then\n        echo \"\"worker1に進捗確認を送信...\"\"\n        ./agent-send.sh worker1 \"\"進捗はいかがですか？analysisページの幅制限範囲修正で困っていることがあれば共有してください。\"\"\n    fi\n    \n    # worker2の確認\n    if [ ! -f ./tmp/worker2_done.txt ]; then\n        echo \"\"worker2に進捗確認を送信...\"\"\n        ./agent-send.sh worker2 \"\"進捗はいかがですか？productページの機能修正で困っていることがあれば共有してください。\"\"\n    fi\n}) &\n\necho \"\"進捗管理システムを開始しました。2分後に自動的に進捗確認を行います。\"\")",
      "mcp__serena__find_symbol",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__find_symbol",
      "mcp__serena__search_for_pattern",
      "mcp__serena__replace_regex",
      "Bash(WORKER_NUM=1)",
      "Bash(# 完了ファイルをリセット\nrm -f ./tmp/worker1_done.txt ./tmp/worker2_done.txt\n\n# 進捗確認タイマーの設定（2分後）\n(sleep 120 && {\n    echo \"\"進捗確認を開始します...\"\"\n    \n    # worker1の確認\n    if [ ! -f ./tmp/worker1_done.txt ]; then\n        echo \"\"worker1に進捗確認を送信...\"\"\n        ./agent-send.sh worker1 \"\"進捗はいかがですか？ProductDetail.tsxルーティングの404エラー修正で困っていることがあれば共有してください。\"\"\n    fi\n    \n}) &\n\necho \"\"進捗管理システムを開始しました。2分後に自動的に進捗確認を行います。\"\")",
      "Bash(# 完了ファイルをリセット\nrm -f ./tmp/worker1_done.txt\n\n# 進捗確認タイマーの設定（2分後）\n(sleep 120 && {\n    if [ ! -f ./tmp/worker1_done.txt ]; then\n        echo \"\"進捗確認を開始します...\"\"\n        ./agent-send.sh worker1 \"\"進捗はいかがですか？ProductDetailフォームのスタイリング修正で困っていることがあれば共有してください。\"\"\n    fi\n}) &\n\necho \"\"進捗管理システムを開始しました。worker1の作業完了を監視中...\"\")",
      "Bash(# 完了ファイルをリセット\nrm -f ./tmp/worker1_done.txt ./tmp/worker2_done.txt\n\n# 進捗確認タイマーの設定（3分後に最初の確認）\n(sleep 180 && {\n    if [ ! -f ./tmp/worker1_done.txt ]; then\n        echo \"\"進捗確認を開始します...\"\"\n        ./agent-send.sh worker1 \"\"進捗はいかがですか？大幅なフォーム実装作業で困っていることがあれば共有してください。段階的に実装を進めてください。\"\"\n    fi\n}) &\n\necho \"\"進捗管理システムを開始しました。3分後に進捗確認を行います。複雑なタスクのため、定期的に進捗報告をお願いします。\"\")",
      "Bash(# 完了ファイルをリセット\nrm -f ./tmp/worker1_done.txt ./tmp/worker2_done.txt\n\n# 進捗確認タイマーの設定（3分後に最初の確認）\n(sleep 180 && {\n    if [ ! -f ./tmp/worker1_done.txt ]; then\n        echo \"\"進捗確認を開始します...\"\"\n        ./agent-send.sh worker1 \"\"進捗はいかがですか？大幅なフォーム実装作業で困っていることがあれば共有してください。段階的に実装を進めてください。\"\"\n    fi\n}) &\n\necho \"\"進捗管理システムを開始しました。3分後に進捗確認を行います。複雑なタスクのため、定期的に進捗報告をお願いします。\"\")",
      "mcp__serena__replace_symbol_body",
      "Bash(npx biome format:*)",
      "mcp__serena__replace_symbol_body"
    ],
    "deny": [],
    "additionalDirectories": [
      "../../frontend/"
    ]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "serena"
  ]
}